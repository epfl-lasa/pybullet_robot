#!/usr/bin/env python

import os
import time
import signal
import sys

from robots import BulletRobot
from simulation import Simulation
from simulation.worlds import EmptyWorld

from pybullet_ros_interfaces import FrankaROSInterface


class SIGINTHandler:
    def __init__(self):
        self.SIGINT = False

    def signal_handler(self, sig, frame):
        self.SIGINT = True


if __name__ == '__main__':
    if len(sys.argv) != 3 + 2:
        print("Incorrect number of arguments")
        exit(1)

    if sys.argv[1] != "franka":
        print("Only franka robot available")
        exit(1)

    desired_frequency = float(sys.argv[2])

    # create simulation and interface objects
    simulation = Simulation()
    interface = FrankaROSInterface()

    # load empty world and add table
    world = EmptyWorld(uid=simulation.uid, add_plane=True, gravity=[0, 0, -9.81])
    world.add_object_from_urdf('table', 'table/table.urdf', position_xyz=[0.4, 0, 0],
                               orientation_wxyz=[0, 0, -0.707, 0.707], fixed_base=True, scaling=0.5)

    # create robot after adding models path
    if not simulation.add_robot_models_path(os.path.join(os.path.dirname(__file__), os.pardir, "models/panda")):
        exit(1)
    robot = BulletRobot(robot_urdf="panda_arm.urdf", enforce_joint_limits=True, uid=simulation.uid)

    robot.set_default_joint_positions([-0.017792060227770554, -0.7601235411041661, 0.019782607023391807,
                                       -2.342050140544315, 0.029840531355804868, 1.5411935298621688,
                                       0.7534486589746342])
    robot.goto_default_joint_positions()
    robot.set_control_mode('torque')
    robot.enable()

    handler = SIGINTHandler()
    signal.signal(signal.SIGINT, handler.signal_handler)

    start = time.time()
    k = 0
    while simulation.is_alive() and interface.is_connected():
        if handler.SIGINT:
            del simulation, interface
            break

        now = time.time()
        interface.publish_robot_state(robot.get_state())
        command = interface.get_command()
        # print(command)
        if command:
            robot.set_joint_torques_cmd(command, compensate_gravity=True)
        else:
            robot.set_joint_torques_cmd([0] * robot.get_nb_movable_joints(), compensate_gravity=True)

        simulation.step()
        elapsed = time.time() - now
        sleep_time = (1. / desired_frequency) - elapsed
        if sleep_time > 0.0:
            time.sleep(sleep_time)
        k = k + 1

        # print("Average rate: ", k / (time.time() - start))
